

//Friends Container component [PARENT]
var FriendsContainer = React.createClass({
	getInitialState: function(){
		return {

			//States of FriendsContainer
			name: 'Benedict Wagnall'
			friends: [
				'Bob',
				'Blob',
				'Bleb'
			],
		}
	},


	//Add the supplied friend to the current array of friends. Concat appends an element to the end of thi
	// array
	addFriend: function(friend){
		this.setState({ 
			friends: this.state.friends.concat([friend])
		});
	},	


	//Renders the header, then the components. Logic for the component render is within the component
	render: function(){
		return (
			<div>
				<h3> Name: {this.state.name} </h3>

				//Components:
				<AddFriend addNew={this.addFriend} />
				<ShowList names={this.state.friends /}>
			
			</div>
		)
	}
});


// ----SEPARATE Class-----

// AddFriend Component [CHILD]
 var AddFriend = React.createClass ({
	getInitialState: function(){ 
		return {
		
			//Initialise as empty string. This gives us a variable to change and use straight away.
			//Assumes that we will use it
			newFriend: ''
		}
	},

	//Set the empty text string with the new value supplied (e)
	updateNewFriend: function(e){
		this.setState({

			newFriend: e.target.value
			
		});
	},

	//Called onClick for the button - add new friend
	handleAddNew: function(){
		this.props.addNew(this.state.newFriend);
		this.setState({
			newFriend: ''
	 });
	},

//render: The text box is empty as newFriend is initialised as an empty string 
//When text is entered into the box onChange updates the empty string in the box.
//When the button is pressed, this string is sent to the handleAddNew method, which
//calls the addFriend method, which adds the string to the array of friends.  
	render: function(){
		return (
			<div>
				<input>
					type="text"
					value={this.state.newFriend}
					onChange={this.updateNewFriend}
				<button onClick={this.handleAddNew}> Add Friend </button>
			</div>	

		);
	}
});


//----SEPARATE CLASS----
//ShowList[CHILDo ]
var ShowList = React.createClass ({
	render: function(){

		//Call the friend function on every element of the names array
		var listItems = this.props.names.map(function(friend)){
			return <li> {friend} </li>;
		});

		//Stuff the listItems generated by the map above into the unordered list.
		//List tags are added there.
		return (
			<div>
				<h3> Friends </h3>
				<ul>
					{listItems}
				</ul>
			</div>
		)
	}
});
